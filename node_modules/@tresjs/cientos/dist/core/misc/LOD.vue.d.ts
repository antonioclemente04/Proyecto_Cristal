import { Object3DEventMap, LOD } from 'three';
interface LODProps {
    /**
     * The distances at which to display each level of detail.
     * There should be one `levels` value for each `LOD` child.
     */
    levels: number[];
    /**
    * Threshold used to avoid flickering at LOD boundaries, as a fraction of distance
    * @default 0.0
    */
    hysteresis?: number;
}
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {}): any;
    };
    refs: {
        lodRef: import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('@tresjs/core').Mutable<import('@tresjs/core').Overwrite<Partial<import('@tresjs/core').Overwrite<LOD<Object3DEventMap>, import('@tresjs/core').WithMathProps<LOD<Object3DEventMap>> & import('@tresjs/core').VueProps & Partial<import('@tresjs/core/dist/src/utils/pointerEvents.js').PointerEventHandlers>>>, Omit<import('@tresjs/core').InstanceProps<LOD<Object3DEventMap>, typeof LOD>, "object">>>>, {}, {}, import('vue').ComputedOptions, import('vue').MethodOptions, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('@tresjs/core').Mutable<import('@tresjs/core').Overwrite<Partial<import('@tresjs/core').Overwrite<LOD<Object3DEventMap>, import('@tresjs/core').WithMathProps<LOD<Object3DEventMap>> & import('@tresjs/core').VueProps & Partial<import('@tresjs/core/dist/src/utils/pointerEvents.js').PointerEventHandlers>>>, Omit<import('@tresjs/core').InstanceProps<LOD<Object3DEventMap>, typeof LOD>, "object">>>>, {}, {}, import('vue').ComputedOptions, import('vue').MethodOptions, {}> | null;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<LODProps, {
    instance: import('vue').ShallowRef<LOD<Object3DEventMap>, LOD<Object3DEventMap>>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<LODProps> & Readonly<{}>, {
    hysteresis: number;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    lodRef: import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('@tresjs/core').Mutable<import('@tresjs/core').Overwrite<Partial<import('@tresjs/core').Overwrite<LOD<Object3DEventMap>, import('@tresjs/core').WithMathProps<LOD<Object3DEventMap>> & import('@tresjs/core').VueProps & Partial<import('@tresjs/core/dist/src/utils/pointerEvents.js').PointerEventHandlers>>>, Omit<import('@tresjs/core').InstanceProps<LOD<Object3DEventMap>, typeof LOD>, "object">>>>, {}, {}, import('vue').ComputedOptions, import('vue').MethodOptions, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('@tresjs/core').Mutable<import('@tresjs/core').Overwrite<Partial<import('@tresjs/core').Overwrite<LOD<Object3DEventMap>, import('@tresjs/core').WithMathProps<LOD<Object3DEventMap>> & import('@tresjs/core').VueProps & Partial<import('@tresjs/core/dist/src/utils/pointerEvents.js').PointerEventHandlers>>>, Omit<import('@tresjs/core').InstanceProps<LOD<Object3DEventMap>, typeof LOD>, "object">>>>, {}, {}, import('vue').ComputedOptions, import('vue').MethodOptions, {}> | null;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
