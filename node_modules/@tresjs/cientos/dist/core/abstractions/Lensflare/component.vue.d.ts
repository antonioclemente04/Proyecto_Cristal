import { Lensflare } from './LensflareImpl';
import { TresColor } from '@tresjs/core';
import { Texture } from 'three';
import { LensflareElementProps, SeedProps } from '.';
export interface LensflareProps {
    /**
     * scale of the lensflare
     */
    scale?: number;
    /**
     * array of lensflare element properties
     */
    elements?: Partial<LensflareElementProps>[];
    /**
     * random seed for generating random seeded elements
     */
    seed?: number;
    /**
     * specifications for generating random seeded elements
     */
    seedProps?: SeedProps[];
    /**
     * default color of lensflare elements
     */
    color?: TresColor;
    /**
     *  default distance of lensflare elements from flare center
     */
    distance?: number;
    /**
     *  default size of lensflare elements
     */
    size?: number;
    /**
     * default texture of lensflare elements
     */
    texture?: Texture | string;
}
declare const _default: import('vue').DefineComponent<LensflareProps, {
    instance: import('vue').ShallowRef<Lensflare | undefined, Lensflare | undefined>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<LensflareProps> & Readonly<{}>, {
    texture: Texture | string;
    color: TresColor;
    elements: Partial<LensflareElementProps>[];
    scale: number;
    distance: number;
    size: number;
    seed: number;
    seedProps: SeedProps[];
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    lensflareRef: import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('@tresjs/core').Mutable<import('@tresjs/core').Overwrite<Partial<import('@tresjs/core').Overwrite<import('three').Group<import('three').Object3DEventMap>, import('@tresjs/core').WithMathProps<import('three').Group<import('three').Object3DEventMap>> & import('@tresjs/core').VueProps & Partial<import('@tresjs/core/dist/src/utils/pointerEvents.js').PointerEventHandlers>>>, Omit<import('@tresjs/core').InstanceProps<import('three').Group<import('three').Object3DEventMap>, typeof import('three').Group>, "object">>>>, {}, {}, import('vue').ComputedOptions, import('vue').MethodOptions, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('@tresjs/core').Mutable<import('@tresjs/core').Overwrite<Partial<import('@tresjs/core').Overwrite<import('three').Group<import('three').Object3DEventMap>, import('@tresjs/core').WithMathProps<import('three').Group<import('three').Object3DEventMap>> & import('@tresjs/core').VueProps & Partial<import('@tresjs/core/dist/src/utils/pointerEvents.js').PointerEventHandlers>>>, Omit<import('@tresjs/core').InstanceProps<import('three').Group<import('three').Object3DEventMap>, typeof import('three').Group>, "object">>>>, {}, {}, import('vue').ComputedOptions, import('vue').MethodOptions, {}> | null;
}, any>;
export default _default;
