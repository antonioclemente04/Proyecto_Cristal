import { MarchingCubes as MarchingCubesImpl } from 'three-stdlib';
export interface MarchingCubesProps {
    resolution?: number;
    maxPolyCount?: number;
    enableUvs?: boolean;
    enableColors?: boolean;
}
declare const api: {
    parent: import('vue').ComputedRef<MarchingCubesImpl>;
};
export type MarchingCubesApi = typeof api;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {}): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<MarchingCubesProps, {
    instance: import('vue').ComputedRef<MarchingCubesImpl>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<MarchingCubesProps> & Readonly<{}>, {
    resolution: number;
    maxPolyCount: number;
    enableUvs: boolean;
    enableColors: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
