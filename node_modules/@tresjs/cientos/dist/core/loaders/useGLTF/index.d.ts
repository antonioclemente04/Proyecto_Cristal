import { TresObject } from '@tresjs/core';
import { ComputedRef, MaybeRef, Ref } from 'vue';
import { GLTF } from 'three-stdlib';
export interface UseGLTFOptions {
    /**
     * Whether to use DRACO compression for loading the model
     * @type {boolean}
     */
    draco?: boolean;
    /**
     * Path to the DRACO decoder. Defaults to https://www.gstatic.com/draco/versioned/decoders/1.5.6/
     * @type {string}
     */
    decoderPath?: string;
    /**
     * A traverse function applied to the scene upon loading the model.
     * @type {Function}
     */
    traverse?: (child: TresObject) => void;
}
/**
 * Vue composable for loading GLTF models in TresJS
 *
 * @remarks
 * This composable uses Three.js GLTFLoader under the hood and supports DRACO compression.
 * When DRACO compression is enabled, it will use the specified decoder path or fallback to Google's CDN.
 *
 * @example
 * ```ts
 * const { state: model } = useGLTF('/path/to/model.glb', { draco: true })
 * ```
 *
 * @param {MaybeRef<string>} path - Path to the GLTF model file
 * @param {UseGLTFOptions} options - Options for loading the model
 * @returns {{ state: GLTF, isLoading: boolean, execute: () => Promise<void> }} Object containing the model state, loading state and reload function
 */
export declare function useGLTF(path: MaybeRef<string>, options?: UseGLTFOptions): {
    state: Ref<GLTF | null>;
    isLoading: Ref<boolean>;
    execute: (delay?: number, ...args: any[]) => Promise<GLTF>;
    nodes: ComputedRef<Record<string, any>>;
    materials: ComputedRef<Record<string, any>>;
};
