import { OnLookAtCallbackArg, Bounds } from './Bounds';
export interface BoundsProps {
    /**
     * Duration of the `lookAt` animation in seconds, 1.0
     */
    duration?: number;
    /**
     * Additional distance from the target when using `lookAt` with a `Box3` or `Object3D`, 0.2
     */
    offset?: number;
    /**
     * Whether to re`lookAt` the last target when the screen is resized, false
     */
    useResize?: boolean;
    /**
     * Whether to `lookAt` the `Bounds` object when the component is mounts, false
     */
    useMounted?: boolean;
    /**
     * Whether to adjust the camera's `near` and `far` settings when using `lookAt`, false
     */
    clip?: boolean;
    /**
     * Animation's easing function. `t` and the returned value should be in the interval `[0, 1]`, cubicEaseOut
     */
    easing?: (t: number) => number;
}
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {}): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<BoundsProps, {
    instance: Bounds;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
    end: (sizeProps: OnLookAtCallbackArg) => any;
    start: (sizeProps: OnLookAtCallbackArg) => any;
    cancel: (sizeProps: OnLookAtCallbackArg) => any;
}, string, import('vue').PublicProps, Readonly<BoundsProps> & Readonly<{
    onEnd?: ((sizeProps: OnLookAtCallbackArg) => any) | undefined;
    onStart?: ((sizeProps: OnLookAtCallbackArg) => any) | undefined;
    onCancel?: ((sizeProps: OnLookAtCallbackArg) => any) | undefined;
}>, {
    duration: number;
    offset: number;
    useResize: boolean;
    useMounted: boolean;
    clip: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
