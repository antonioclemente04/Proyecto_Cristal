import { VectorFlexibleParams } from '@tresjs/core';
import { Camera, Box3, Object3D, Quaternion, Vector3 } from 'three';
export interface BoundsControlsProto {
    update: () => void;
    target: Vector3;
    maxDistance: number;
    addEventListener: (event: string, callback: (event: any) => void) => void;
    removeEventListener: (event: string, callback: (event: any) => void) => void;
}
export interface OnLookAtCallbackArg {
    position: Vector3;
    quaternion: Quaternion;
    zoom: number | undefined;
    up: Vector3 | undefined;
    lookAt: Vector3;
    box: Box3;
    object: Box3 | Object3D | undefined;
}
export declare class Bounds extends Object3D {
    camera: Camera;
    offset: number;
    duration: number;
    clip: boolean;
    private _start;
    private _goal;
    private _animationState;
    private _t;
    private _controls;
    private _controlsRemoveEventListener;
    private _cachedFitArgs;
    constructor(camera: Camera);
    dispose(): void;
    onStart(_: OnLookAtCallbackArg): void;
    onCancel(_: OnLookAtCallbackArg): void;
    onEnd(_: OnLookAtCallbackArg): void;
    easing: (t: number) => number;
    get controls(): BoundsControlsProto | null;
    set controls(controls: BoundsControlsProto | null);
    private _stop;
    /**
     * Calculates a boundary box around an `Object3D` and centers the camera accordingly.
     */
    lookAt(object: Object3D): void;
    /**
     * Calculates a boundary box around an `Object3D` and centers the camera accordingly and animates the camera's `up` vector.
     */
    lookAt(object: Object3D, up: VectorFlexibleParams): void;
    /**
     * Centers the camera's viewport on a `Box3`.
     */
    lookAt(box3: Box3): void;
    /**
     * Centers the camera's viewport on a `Box3` and animates the camera's `up` vector.
     */
    lookAt(box3: Box3, up: VectorFlexibleParams): void;
    /**
     * Look at a `Vector3`.
     */
    lookAt(target: VectorFlexibleParams): void;
    /**
     * Look at a `Vector3`, if provided. Move the camera to `position`.
     */
    lookAt(target: VectorFlexibleParams | undefined | null, position: VectorFlexibleParams): void;
    /**
     * Look at a `Vector3`, if provided. Move the camera to `position` and animate the camera's `up` vector.
     */
    lookAt(target: VectorFlexibleParams | undefined | null, position: VectorFlexibleParams, up: VectorFlexibleParams): void;
    /**
     * Rerun `lookAt` using the prior arguments. If `lookAt` has never been called, uses the `Bounds` object.
     */
    lookAt(): void;
    animate(delta: number): boolean;
}
