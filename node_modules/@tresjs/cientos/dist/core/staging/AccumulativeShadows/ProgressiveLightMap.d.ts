import { Camera, Group, Light, Material, Mesh, Scene, ShaderMaterial, Texture, WebGLRenderer, Color, MeshLambertMaterial, WebGLRenderTarget } from 'three';
export declare class ProgressiveLightMap {
    renderer: WebGLRenderer;
    res: number;
    scene: Scene;
    object: Mesh | null;
    lightsGroup: Group | null;
    buffer1Active: boolean;
    progressiveLightMap1: WebGLRenderTarget;
    progressiveLightMap2: WebGLRenderTarget;
    discardMat: ShaderMaterial;
    targetMat: MeshLambertMaterial;
    previousShadowMap: {
        value: Texture;
    };
    averagingWindow: {
        value: number;
    };
    clearColor: Color;
    clearAlpha: number;
    lights: {
        object: Light;
        intensity: number;
    }[];
    meshes: {
        object: Mesh;
        material: Material | Material[];
    }[];
    constructor(renderer: WebGLRenderer, scene: Scene, res?: number);
    clear(): void;
    prepare(): void;
    finish(): void;
    configure(object: Mesh, lightsGroup: Group): void;
    update(camera: Camera, blendWindow?: number): void;
}
