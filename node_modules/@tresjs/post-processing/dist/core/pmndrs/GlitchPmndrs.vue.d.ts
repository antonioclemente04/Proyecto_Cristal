import { BlendFunction, GlitchEffect, GlitchMode } from 'postprocessing';
import { Texture, Vector2 } from 'three';
export interface GlitchPmndrsProps {
    blendFunction?: BlendFunction;
    /**
     *  The minimum and maximum delay between glitch activations in seconds.
     */
    delay?: Vector2;
    /**
     * The minimum and maximum duration of a glitch in seconds.
     */
    duration?: Vector2;
    /**
     * The strength of weak and strong glitches.
     */
    strength?: Vector2;
    /**
     * The glitch mode. Can be DISABLED | SPORADIC | CONSTANT_MILD | CONSTANT_WILD.
     */
    mode?: GlitchMode;
    /**
     * Turn the effect on and off.
     */
    active?: boolean;
    /**
     *
     * The threshold for strong glitches.
     */
    ratio?: number;
    /**
     * The scale of the blocky glitch columns.
     */
    columns?: number;
    /**
     * A chromatic aberration offset. If provided, the glitch effect will influence this offset.
     */
    chromaticAberrationOffset?: Vector2;
    /**
     * A perturbation map. If none is provided, a noise texture will be created.
     */
    perturbationMap?: Texture;
    /**
     * The size of the generated noise map. Will be ignored if a perturbation map is provided.
     */
    dtSize?: number;
}
declare const _default: import('vue').DefineComponent<GlitchPmndrsProps, {
    pass: import('vue').ShallowRef<import('postprocessing').EffectPass | null>;
    effect: import('vue').ShallowRef<GlitchEffect | null>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<GlitchPmndrsProps> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export default _default;
