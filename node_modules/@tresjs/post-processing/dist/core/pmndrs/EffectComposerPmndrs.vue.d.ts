import { EffectComposer } from 'postprocessing';
import { InjectionKey, ShallowRef } from 'vue';
export declare const effectComposerInjectionKey: InjectionKey<ShallowRef<EffectComposer | null>>;
export interface EffectComposerPmndrsProps {
    enabled?: boolean;
    depthBuffer?: boolean;
    disableNormalPass?: boolean;
    stencilBuffer?: boolean;
    resolutionScale?: number;
    autoClear?: boolean;
    multisampling?: number;
    frameBufferType?: number;
}
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<EffectComposerPmndrsProps, {
    composer: ShallowRef<EffectComposer | null>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    render: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<EffectComposerPmndrsProps> & Readonly<{
    onRender?: ((...args: any[]) => any) | undefined;
}>, {
    enabled: boolean;
    depthBuffer: boolean;
    disableNormalPass: boolean;
    stencilBuffer: boolean;
    autoClear: boolean;
    multisampling: number;
    frameBufferType: number;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
