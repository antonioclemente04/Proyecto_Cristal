import { BlendFunction, KernelSize, BloomEffect } from 'postprocessing';
export interface BloomPmndrsProps {
    /**
     * The blend function of this effect.
     * @default BlendFunction.SCREEN
     * @type {BlendFunction}
     * @memberof BloomPmndrsProps
    */
    blendFunction?: BlendFunction;
    /**
     * The intensity of the bloom effect.
     *
     * @default 1
     * @type {number}
     * @memberof BloomProps
     */
    intensity?: number;
    /**
     * The kernel size.
     *
     * @default KernelSize.LARGE
     *
     * @type {KernelSize}
     * @memberof BloomPmndrsProps
     */
    kernelSize?: KernelSize;
    /**
     * The luminance threshold. Raise this value to mask out darker elements in the scene. Range is [0, 1].
     *
     * @default 0.9
     *
     * @type {number}
     * @memberof BloomPmndrsProps
     */
    luminanceThreshold?: number;
    /**
     * Controls the smoothness of the luminance threshold. Range is [0, 1].
     *
     * @default 0.025
     *
     * @type {number}
     * @memberof BloomPmndrsProps
     */
    luminanceSmoothing?: number;
    /**
     * Enables mip map blur.
     *
     * @default false
     *
     * @type {boolean}
     * @memberof BloomPmndrsProps
     */
    mipmapBlur?: boolean;
}
declare const _default: import('vue').DefineComponent<BloomPmndrsProps, {
    pass: import('vue').ShallowRef<import('postprocessing').EffectPass | null>;
    effect: import('vue').ShallowRef<BloomEffect | null>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<BloomPmndrsProps> & Readonly<{}>, {
    mipmapBlur: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export default _default;
