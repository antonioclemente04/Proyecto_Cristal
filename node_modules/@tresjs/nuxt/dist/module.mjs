import { readFile } from 'node:fs/promises';
import { defineNuxtModule, createResolver, addImports, resolvePath, addComponent, addVitePlugin } from '@nuxt/kit';
import * as core from '@tresjs/core';
import { templateCompilerOptions } from '@tresjs/core';
import { defu } from 'defu';
import { findExportNames } from 'mlly';
import { readPackageJSON } from 'pkg-types';
import glsl from 'vite-plugin-glsl';
import { existsSync } from 'node:fs';
import { addCustomTab } from '@nuxt/devtools-kit';
import { dirname, join } from 'node:path';

const version = "5.1.0";

const DEVTOOLS_UI_ROUTE = "/__tres_nuxt_devtools";
const DEVTOOLS_UI_LOCAL_PORT = 3300;
function setupDevToolsUI(nuxt, resolver) {
  const clientPath = resolver.resolve("./client");
  const isProductionBuild = existsSync(clientPath);
  if (isProductionBuild) {
    nuxt.hook("vite:serverCreated", async (server) => {
      const sirv = await import('sirv').then((r) => r.default || r);
      server.middlewares.use(
        DEVTOOLS_UI_ROUTE,
        sirv(clientPath, { dev: true, single: true })
      );
    });
  } else {
    nuxt.hook("vite:extendConfig", (config) => {
      config.server = config.server || {};
      config.server.proxy = config.server.proxy || {};
      config.server.proxy[DEVTOOLS_UI_ROUTE] = {
        target: "http://localhost:" + DEVTOOLS_UI_LOCAL_PORT + DEVTOOLS_UI_ROUTE,
        changeOrigin: true,
        followRedirects: true,
        rewrite: (path) => path.replace(DEVTOOLS_UI_ROUTE, "")
      };
    });
  }
  addCustomTab(() => ({
    name: "tres-nuxt-devtools",
    title: "TresJS",
    icon: "https://raw.githubusercontent.com/Tresjs/tres/main/public/favicon.svg",
    view: {
      type: "iframe",
      src: DEVTOOLS_UI_ROUTE
    }
  }));
}

async function getAllPackageDeps(nuxtRootDir) {
  const localPkg = await readPackageJSON(nuxtRootDir);
  let rootPkg = localPkg;
  const parentDir = dirname(nuxtRootDir);
  const rootPkgPath = join(parentDir, "package.json");
  if (existsSync(rootPkgPath)) {
    rootPkg = await readPackageJSON(parentDir);
  }
  return {
    ...rootPkg.dependencies,
    ...rootPkg.devDependencies,
    ...localPkg.dependencies,
    ...localPkg.devDependencies
  };
}
const module = defineNuxtModule({
  meta: {
    name: "@tresjs/nuxt",
    configKey: "tres",
    compatibility: {
      nuxt: ">=3.16.0"
    },
    version
  },
  defaults: {
    modules: [],
    devtools: true,
    glsl: false
  },
  async setup(options, nuxt) {
    const resolver = createResolver(import.meta.url);
    nuxt.options.build.transpile.push(/@tresjs/);
    for (const name in core) {
      if (name.match(/^use/)) {
        addImports({
          from: "@tresjs/core",
          name
        });
      }
    }
    addImports([
      {
        from: "@tresjs/core",
        name: "extend",
        as: "extendTres"
      },
      {
        from: "@tresjs/core",
        type: true,
        name: "TresObject"
      }
    ]);
    nuxt.hook("prepare:types", ({ references }) => {
      references.push({ types: "@tresjs/core" });
    });
    nuxt.options.vue.compilerOptions.isCustomElement = templateCompilerOptions.template.compilerOptions.isCustomElement;
    const allDeps = await getAllPackageDeps(nuxt.options.rootDir);
    const coreDeps = Object.keys(allDeps).filter((d) => d.startsWith("@tresjs/"));
    for (const mod of /* @__PURE__ */ new Set([...options.modules, ...coreDeps])) {
      if (mod === "@tresjs/core" || mod === "@tresjs/nuxt") {
        continue;
      }
      const entry = await resolvePath(mod);
      if (entry === mod) {
        continue;
      }
      const imports = findExportNames(await readFile(entry, "utf8"));
      for (const name of imports) {
        if (name.match(/^[a-z]/)) {
          addImports({
            from: mod,
            name
          });
        } else {
          addComponent({
            name,
            filePath: mod,
            export: name
          });
        }
      }
    }
    nuxt.options.vite.resolve = defu(nuxt.options.vite.resolve, {
      dedupe: ["three"]
    });
    nuxt.options.vite.optimizeDeps = defu(nuxt.options.vite.optimizeDeps, {
      include: ["three"]
    });
    await Promise.all([
      addComponent({
        name: "TresCanvas",
        filePath: resolver.resolve("./runtime/TresCanvas.client.vue")
      }),
      addComponent({
        name: "TresCanvas",
        filePath: resolver.resolve("./runtime/TresCanvas.server.vue")
      })
    ]);
    if (options.devtools) {
      setupDevToolsUI(nuxt, resolver);
    }
    if (options.glsl) {
      addVitePlugin(glsl());
    }
  }
});

export { module as default };
